import fs from 'fs';
import { listDirectory } from './lib/listDirectory';
import { findChangeSet } from './lib/findChangeSet';
const path = 'vendor/silverstripe/';
if (!fs.existsSync(path)) {
    console.error(`could not find ${path}`);
    process.exit(1);
}
let modules = listDirectory(path).map(modulePath => path + modulePath);
const otherVendors = [
    'cwp',
    'dnadesign',
    'symbiote',
    'bringyourownideas',
    'colymba',
    'tijsverkoyen',
    'tractorcow'
];
otherVendors.forEach((vendor) => {
    const path = `vendor/${vendor}`;
    if (fs.existsSync(path)) {
        modules = modules.concat(listDirectory(path).map(modulePath => `${path}/${modulePath}`));
    }
});
modules
    .map(findChangeSet)
    .forEach(promise => {
    promise.then(({ path, results }) => {
        let outputChange = !(process.env.ONLY_UPDATE);
        let output = '# ' + path + "\n";
        for (const key in results) {
            const commits = results[key];
            outputChange = outputChange || commits.length > 0;
            output += `* ${key}` + (commits.length === 0 ? `: all up-to-date` : '') + "\n";
            commits.forEach(commit => (output += `  * ${commit}` + "\n"));
        }
        output += "\n";
        if (outputChange) {
            console.log(output);
        }
    })
        .catch(() => { });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHcEQsTUFBTSxJQUFJLEdBQUcsc0JBQXNCLENBQUM7QUFFcEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ25CO0FBRUQsSUFBSSxPQUFPLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsQ0FBQztBQUV2RSxNQUFNLFlBQVksR0FBRztJQUNqQixLQUFLO0lBQ0wsV0FBVztJQUNYLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsU0FBUztJQUNULGNBQWM7SUFDZCxZQUFZO0NBQ2YsQ0FBQztBQUVGLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtJQUM1QixNQUFNLElBQUksR0FBRyxVQUFVLE1BQU0sRUFBRSxDQUFDO0lBQ2hDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNyQixPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDcEIsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQ2pFLENBQUM7S0FDTDtBQUNMLENBQUMsQ0FBQyxDQUFBO0FBRUYsT0FBTztLQUNGLEdBQUcsQ0FBQyxhQUFhLENBQUM7S0FDbEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBQyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxZQUFZLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUU7WUFDdkIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLFlBQVksR0FBRyxZQUFZLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDbEQsTUFBTSxJQUFJLEtBQUssR0FBRyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUM5RSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksT0FBTyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFBO1NBQ2hFO1FBQ0QsTUFBTSxJQUFJLElBQUksQ0FBQztRQUVmLElBQUksWUFBWSxFQUFFO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtJQUNMLENBQUMsQ0FBQztTQUNELEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztBQUNyQixDQUFDLENBQUMsQ0FBQyJ9